# # Server Port
# server.port=8080

# # H2 Database (for local development)
# spring.h2.console.enabled=true
# spring.h2.console.path=/h2-console
# spring.datasource.url=jdbc:h2:mem:tododb
# spring.datasource.driverClassName=org.h2.Driver
# spring.datasource.username=sa
# spring.datasource.password=

# # JPA/Hibernate Properties
# spring.jpa.hibernate.ddl-auto=update # Use 'update' for dev, 'none' for production
# spring.jpa.show-sql=true
# spring.jpa.properties.hibernate.format_sql=true

# # CORS for React Frontend
# # IMPORTANT: Adjust this in production!
# # Replace with your React app's domain when deployed on S3
# spring.web.cors.allowed-origins=http://localhost:3000
# spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
# spring.web.cors.allowed-headers=*
# spring.web.cors.allow-credentials=true
# spring.web.cors.max-age=3600

server.port=8080

# CORS - VERY IMPORTANT for production, set to your React frontend URL!
spring.web.cors.allowed-origins=* # For now, for easy testing
spring.web.cors.allowed-methods=GET,POST,PUT,DELETE,OPTIONS
spring.web.cors.allowed-headers=*
spring.web.cors.allow-credentials=true
spring.web.cors.max-age=3600

# PostgreSQL (These will be injected as environment variables in Kubernetes)
# spring.datasource.url=jdbc:postgresql://${DB_HOST}:5432/${DB_NAME}
# spring.datasource.username=${DB_USERNAME}
# spring.datasource.password=${DB_PASSWORD}
spring.jpa.hibernate.ddl-auto=update # For initial table creation. Change to 'none' for production
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true